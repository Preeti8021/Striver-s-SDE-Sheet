1. N- forest
public class Solution {
    public static void nForest(int n) {
        for(int i = 0; i<n; i++){
            for(int j  =0 ; j<n; j++){
                System.out.print("* ");
            }
            System.out.println();
        }
    }
}
Output: 
* * *
* * *
* * *

  
2. N/2- Forest pyramid 
public class Solution {
    public static void nForest(int n) {
        for(int i = 0; i<n; i++){
            for(int j = 0; j<=i; j++){
                System.out.print("* ");
            }
            System.out.println();
        }
 }
}
Output: 
* 
* *
* * *


3. N-Triangles
public class Solution {
    public static void nTriangle(int n) {
        for(int i = 1; i<=n ; i++){
            for(int j = 1; j<=i; j++){
                System.out.print(j+" ");
            }
            System.out.println();
        }
    }
}
Output: 
1
1 2 
1 2 3

  
4. Triangle
public class Solution {
    public static void nTriangle(int n) {
        for(int i = 1; i<=n ; i++){
            for(int j = 1; j<=i; j++){
                System.out.print(i+" ");
            }
            System.out.println();
        }
    }
}
Output: 
1
2 2 
3 3 3

  
5. Seeding
public class Solution {
    public static void seeding(int n) {
        for(int i = 1; i<=n ; i++){
            for(int j = n-i; j>=0; j--){
                System.out.print("* ");
            }
            System.out.println();
        }
    }
} 
Output: 
* * *
* *
*

  
6. Reverse Number Triangle
public class Solution {
    public static void nNumberTriangle(int n) {
        for(int i = 1; i<=n ; i++){
            for(int j = n-i+1; j>0; j--){
                System.out.print(i+" ");
            }
            System.out.println();
        }
    }
}
Output: 
1 2 3
1 2
1

  
7. Star triangle
public class Solution {
    public static void nStarTriangle(int n) {
        for(int i = 0 ;i<n; i++){ 
            for(int j = n-2; j>=i;j--){
                System.out.print(" ");
            }
          
            for(int j = 0; j<2*i+1; j++){
                System.out.print("*");
            }
          
            System.out.println();
        }
    }
}
Output: 
  *
 ***
*****


8. Reverse Star Triangle
public class Solution {
    public static void nStarTriangle(int n) {
        for(int i = 0; i<n; i++){
            for(int j = 0; j<n-1; j++){
                System.out.print(" ");
            }
            for(int j = 2*i+1; j>=0; j--){
                System.out.print("*");
            }
            System.out.println();
        }
    }
}
Output: 
*****
 ***
  *

  
9. Star Diamond
public class Solution {
    public static void nStarDiamond(int n) {
        for(int i = 0 ;i<n; i++){ 
            for(int j = n-2; j>=i;j--){
                System.out.print(" ");
            }
            for(int j = 0; j<2*i+1; j++){
                System.out.print("*");
            }
            System.out.println();
        }
        for(int i = n; i>=0; i--){ 
            for(int j = n-i; j>0; j--){
                System.out.print(" ");
            }
            for(int j = 2*(i-1)+1; j>0; j--){
                System.out.print("*");
            }
            System.out.println();
        }
        
    }
}
Output: 
  *
 ***
*****
*****
 ***
  *


10. Rotated Triangle
public class Solution {
    public static void nStarTriangle(int n) {
        for(int i = 0; i<n; i++){
            for(int j = 0; j<=i; j++){
                System.out.print("*");
            }
            System.out.println();
        }
        for(int i = 0; i<n-1; i++){
            for(int j = n-i-1; j>0; j--){
                System.out.print("*");
            }
            System.out.println();
        }
    }
}
Output: 
*
**
***
**
*


11. Binary Number Triangle
public class Solution {
    public static void nBinaryTriangle(int n) {
        int s;
        for(int i = 0; i<n; i++){
            if(i%2==0){
                s= 1; 
                for(int j = 0; j<=i; j++){ 
                    System.out.print(s+" "); 
                    s=1-s; 
                }
            }
            else{
                s=0; 
                for(int j = 0; j<=i; j++){
                    System.out.print(s+" ");
                    s= 1-s; 
                }
            }
            
            System.out.println(); 
        }
    }
}
Output: 
1
0 1
1 0 1


12. Number Crown
public class Solution {
    public static void numberCrown(int n) {
        for(int i = 0 ; i<n; i++){
            //first pattern
            for(int j = 0; j<=i; j++){
                System.out.print(j+1+" ");
            }
            //second pattern 
            for(int j = 0; j<(n+2)+3*i;j++){
                System.out.print(" ");
            }
            //third pattern
            for(int j = 0; j<=i; j++){
                System.out.print(i+1-j+" ");
            }
            System.out.println(); 
        }
    }
}
Output:
1         1
1 2     2 1
1 2 3 3 2 1


13. Increasing Number Traingle
public class Solution {
    public static void nNumberTriangle(int n) {
        int s = 1; 
        for(int i = 0; i<n; i++){
            for(int j = 0; j<=i; j++){
                System.out.print(s+" ");
                s++; 
            }
            System.out.println();
        }
    }
}
Output: 
1
2 3
4 5 6


14. Increasing Letter Triangle
public class Solution {
    public static void nLetterTriangle(int n) {
        for(int i = 0; i<n; i++){
            char c = 'A';
            for(int j = 0; j<=i; j++){
                System.out.print( c++ +" ");
            }
            System.out.println();
        }
    }
}
Output: 
A
A B
A B C


15. Reverse Letter Triangle 
public class Solution {
    public static void nLetterTriangle(int n) {
        for(int i =0; i<n; i++){
            char c = 'A';
            for(int j = n-i; j>0; j-- ){
                System.out.print(c++ + " ");
            }
            System.out.println();
        }
    }
}
Output: 
A B C
A B
A


16. Alpha Ramp 
public class Solution {
    public static void alphaRamp(int n) {
        char c = 'A';
        for(int i = 0; i<n; i++){
            for(int j = 0; j<=i; j++){
                System.out.print(c+" ");
            }
            c++; 
            System.out.println();
        }
    }
}
Output: 
A
B B
C C C


17. Alpha Hill
public class Solution {
    public static void alphaHill(int n) {
        char c = 'A';
        for(int i = 0; i<n; i++){
            c='A';
            for(int j = 0; j<n-i-1; j++){
                System.out.print(" ");
            }
            for(int j = 0; j<=i ;j++){
                System.out.print(c++ +" ");
            }
            // c='A';
            c--;
            c--;
            for(int j = 0; j<i; j++){
                System.out.print(c-- + " ");
            }
            System.out.println();
        }
    }
}
Output: 
    A
  A B A
A B C B A


18. Alpha- Triangle
public class Solution {
    public static void alphaTriangle(int n) {
        char c = 'A';
        for(int i = 0; i<n-1; i++){
            c++; 
        }
        char s = c; 
       for(int i = 0; i<n; i++){
           c = s; 
           for(int j = 0; j<=i; j++){
               System.out.print(c-- + " "); 
           }
           System.out.println();
       }
    }
}
Output: 
C
C B 
C B A


19. Symmetric Void
public class Solution {
    public static void symmetry(int n) {
        for(int i = 0; i<n; i++){
            for(int j = n-i; j>0; j--){
                System.out.print("*"+" ");
            }
            for(int j = 0; j<=i; j++){
                System.out.print(" ");
            }
            for(int j = 0; j<i; j++){
                System.out.print(" ");
            }
            for(int j = n-i; j>0; j--){
                System.out.print("*"+" ");
            }
            System.out.println();
        }

        for(int i = 0; i<n; i++){
            for(int j = 0; j<=i;j++){
                System.out.print("*"+' ');
            }
            for(int j =n-i; j>0; j--){
                System.out.print(" ");
            }
            for(int j =n-i-1; j>0; j--){
                System.out.print(" ");
            }
            for(int j = 0; j<=i;j++){
                System.out.print("*"+" ");
            }
            System.out.println();
        }
    }
}
Output: 
* * * * * * 
* *     * * 
*         * 
*         * 
* *     * * 
* * * * * * 


20. Symmetry 
public class Solution {
    public static void symmetry(int n) {
        for(int i = 0; i<n; i++){
            for(int j = 0; j<=i; j++){
                System.out.print("*"+" ");
            }
            for(int j = 0; j<(n+5)-4*i; j++){
                System.out.print(" ");
            }
            for(int j = 0; j<=i; j++){
                System.out.print("*"+" ");
            }
            System.out.println();
        }

        for(int i = 0; i<n; i++){
            for(int j = 0; j<n-i-1; j++){
                System.out.print("*"+" ");
            }
            for(int j = 0; j<(n)+2*i-1; j++){
                System.out.print(" ");
            }
            for(int j = 0; j<n-i-1; j++){
                System.out.print("*"+" ");
            }
            System.out.println();
        }
    }
}
Output: 
*         *
* *     * *
* * * * * *
* *     * *
*         *


21. Ninja And The Star Pattern I
public class Solution {
    public static void getStarPattern(int n) {
        for(int i = 0; i<n; i++){
            for(int j = 0; j<n; j++){
                if(i==0 || i==n-1 || j==0 || j==n-1){
                    System.out.print("*");
                }
                else{
                    System.out.print(" ");
                }
            }
            System.out.println();
        }
    }
}
Output: 
****
*  *
*  *
****


22. Ninja And The Number Pattern
public class Solution {
    public static void getNumberPattern(int n) {
        int s =n; 
        n = n+(n-1);
        int[][] pattern = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int minDistance = Math.min(Math.min(i, j), Math.min(n - 1 - i, n - 1 - j));
                pattern[i][j] = s - minDistance;
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                System.out.print(pattern[i][j]);
            }
            System.out.println();
        }
    }
}
Output: 
4444444
4333334
4322234
4321234
4322234
4333334
4444444
